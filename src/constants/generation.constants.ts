/* eslint-disable @typescript-eslint/naming-convention */
import { escaped } from '../helpers';

export const CONSTRUCTOR =
   '({}+[])[-~-~-~-~-~+[]]+({}+[])[+!+[]]+([][[]]+[])[+!+[]]+(![]+[])[-~-~-~+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+({}+[])[-~-~-~-~-~+[]]+(!![]+[])[+[]]+({}+[])[+!+[]]+(!![]+[])[+!+[]]';
export const TOKENS_MAP: Record<string, string> = {
   undefined: '([][[]]+[])',
   false: '(![]+[])',
   true: '(!![]+[])',
   '[object Object]': '({}+[])',
   NaN: '([]+ +[!+[]])',
   Infinity: '((+!+[]/+[])+[])',
   'function Number() { [native code] }': `(+[])[${CONSTRUCTOR}]+[]`,
   'function String() { [native code] }': `([]+[])[${CONSTRUCTOR}]+[]`,
   'function Boolean() { [native code] }': `(![])[${CONSTRUCTOR}]+[]`,
   'function Array() { [native code] }': `[][${CONSTRUCTOR}]+[]`,
   'function RegExp() { [native code] }': `/[]/[${CONSTRUCTOR}]+[]`,
   'function Function() { [native code] }': `[][[]+(![]+[])[-~+[]]+(!![]+[])[+[]]][${CONSTRUCTOR}]+[]`,
   ' ': '({}+[])[(-~+[]<<-~-~-~+[])-!+[]]',
   '-': '(~+[]+[])[+[]]',
   1: '(+!+[])',
   2: '(-~+!+[])',
   3: '(-~-~+!+[])',
   4: '(-~-~-~-~+[])',
   5: '(-~-~-~-~-~+[])',
   6: '(-~-~-~-~-~-~+[])',
   7: '(-~+[]<<-~-~-~+[])-!+[]',
   8: '(+!+[]+[+[]]-(-~-~+[]))',
   9: '(+!+[]+[+[]]-!+[])',
   0: '(+[])',
   N: '([]+ +[!+[]])[+[]]',
   O: '({}+[])[-~+[]<<-~-~-~+[]]',
   a: '(![]+[])[-~+[]]',
   b: '({}+[])[-~+!+[]]',
   c: '({}+[])[-~-~-~-~-~+[]]',
   d: '([][[]]+[])[+!+[]+[+[]]-(-~-~+[])]',
   e: '(!![]+[])[-~-~+!+[]]',
   f: '(![]+[])[+[]]',
   i: '([][[]]+[])[-~-~-~-~-~+[]]',
   j: '({}+[])[-~-~-~+[]]',
   l: '(![]+[])[-~-~+[]]',
   n: '([][[]]+[])[+!+[]]',
   o: '({}+[])[+!+[]]',
   r: '(!![]+[])[+!+[]]',
   s: '(![]+[])[-~-~-~+[]]',
   t: '(!![]+[])[+[]]',
   u: '([][[]]+[])[+[]]',
   A: `([][${CONSTRUCTOR}]+[])[(+!+[]+[+[]]-!+[])]`,
   B: `((![])[${CONSTRUCTOR}]+[])[(+!+[]+[+[]]-!+[])]`,
   E: `(/[]/[${CONSTRUCTOR}]+[])[+!+[]+[-~-~+[]]]`,
   F: `([][[]+(![]+[])[-~+[]]+(!![]+[])[+[]]][${CONSTRUCTOR}]+[])[(+!+[]+[+[]]-!+[])]`,
   I: `((+!+[]/+[])+[])[+[]]`,
   R: `(/[]/[${CONSTRUCTOR}]+[])[(+!+[]+[+[]]-!+[])]`,
   S: `(([]+[])[${CONSTRUCTOR}]+[])[(+!+[]+[+[]]-!+[])]`,
   g: `(/[]/[${CONSTRUCTOR}]+[])[+!+[]+[+!![]]]`,
   m: `((+[])[${CONSTRUCTOR}]+[])[+!+[]+[+!![]]]`,
   p: `(/[]/[${CONSTRUCTOR}]+[])[+!+[]+[-~-~-~-~+[]]]`,
   v: `([][${CONSTRUCTOR}]+[])[-~-~+[]+[-~-~-~-~+[]]]`,
   x: `(/[]/[${CONSTRUCTOR}]+[])[+!+[]+[-~-~-~+[]]]`,
   y: '((+!+[]/+[])+[])[(-~+[]<<-~-~-~+[])-!+[]]',
   '[': '({}+[])[+[]]',
   ']': '({}+[])[+!+[]+[]+(+!+[]<<-~-~+[])]',
   '(': `([][${CONSTRUCTOR}]+[])[+!+[]+[-~-~-~-~+[]]]`,
   ')': `([][${CONSTRUCTOR}]+[])[+!+[]+[-~-~-~-~-~+[]]]`,
   '{': `([][${CONSTRUCTOR}]+[])[+!+[]+[(-~+[]<<-~-~-~+[])-!+[]]]`,
   '}': `([][${CONSTRUCTOR}]+[])[(-~-~+!+[])+[(-~-~+!+[])]]`
};
export const SYMBOLS = Array.from(' -0123456789ABEFINORSabcdefgijlmnoprstuvxy{}()[]');
export const COMPLEX_TOKENS_FILTER = [
   /^undefined/,
   /^false/,
   /^true/,
   /^\[object Object\]/,
   /^NaN/,
   /^Infinity/,
   /^function (Number|String|Boolean|Array|Function|RegExp)\(\) \{ \[native code\] \}/
];
export const FILTER_REGEX = new RegExp(`[^${escaped(SYMBOLS.join(''))}]`, 'g');
export const DISALLOWED_REGEX = new RegExp(`^${FILTER_REGEX.source}+`, '');
export const DEBOUNCE_DELAY = 300;
export const EASTER_EGG_TEXT = ['get madness', 'js madness'];
export const FORBIDDEN_WORDS = [
   'document',
   'window',
   'fetch',
   'eval',
   'Function',
   'XMLHttpRequest',
   'setTimeout',
   'setInterval',
   'Worker',
   'Clipboard',
   'postMessage',
   'this',
   'globalThis',
   'Element',
   'import',
   'export',
   'Promise',
   'Object',
   'Number',
   'Map',
   'Array',
   'Set',
   'RegExp',
   'Boolean',
   'String',
   'Symbol',
   'BigInt',
   'null',
   'undefined',
   'if',
   'else',
   'with',
   'switch',
   'case',
   'with',
   'delete',
   'for',
   'while',
   'return',
   'const',
   'let',
   'var'
];
